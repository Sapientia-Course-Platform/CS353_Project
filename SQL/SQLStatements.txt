use cs353_project;

DROP TABLE IF EXISTS Take_Quiz;
DROP TABLE IF EXISTS Zoom_Session;
DROP TABLE IF EXISTS Discount;
DROP TABLE IF EXISTS Evaluates;
DROP TABLE IF EXISTS Teaches;
DROP TABLE IF EXISTS Enrolls;
DROP TABLE IF EXISTS Wishlist;
DROP TABLE IF EXISTS Certificate;
DROP TABLE IF EXISTS Complaint_Post_Instructor;
DROP TABLE IF EXISTS Complaint_Post_Student;
DROP TABLE IF EXISTS QandA_Post_Student;
DROP TABLE IF EXISTS QandA_Post_Instructor;
DROP TABLE IF EXISTS Complaint_Entry;
DROP TABLE IF EXISTS QandA_Entry;
DROP TABLE IF EXISTS Course_Announcement;
DROP TABLE IF EXISTS Note;
DROP TABLE IF EXISTS Quiz_Question;
DROP TABLE IF EXISTS Quiz;
DROP TABLE IF EXISTS Lecture;
DROP TABLE IF EXISTS Course;

DROP TABLE IF EXISTS Student;
DROP TABLE IF EXISTS Instructor;
DROP TABLE IF EXISTS Admin;

/*
 General Assumptions:
 ID                 -> INT AUTO_INCREMENT
 referencing ID     -> INT NOT NULL
 short string       -> VARCHAR(30)
 mid string         -> VARCHAR(50)
 long string        -> VARCHAR(70)
 description        -> VARCHAR(300)
 money              -> NUMERIC(12, 2) OR NUMERIC(8, 2)
 %                  -> NUMERIC(5, 2)
 date               -> DATE
 URL                -> VARCHAR(1024)

 Special Cases:
 membership_type    -> ENUM('BRZ', 'SLV', 'GLD')
 refund_request     -> BOOLEAN
 duration           -> TIME
 lecture_content    -> BLOB NOT NULL
 membership_type    -> ENUM('BRZ', 'SLV', 'GLD') NOT NULL DEFAULT 'BRZ'
 answer             -> ENUM(1, 2, 3, 4) NOT NULL DEFAULT 1

 Constraints:
 Student-Course cannot be in Wishlist, Enrolls, and Certificate all together.

 Future:
 ENGINE = InnoDB; can be added

 */


/* Assumptions:
   Id is 8 character and unique
   FOREIGN KEY (bdate) REFERENCES company(cid)
*/
CREATE TABLE Student(
SID             INT AUTO_INCREMENT,
name            VARCHAR(50) NOT NULL,
e_mail          VARCHAR(50) NOT NULL UNIQUE,
password        VARCHAR(30) NOT NULL,
membership_type ENUM('BRZ', 'SLV', 'GLD') NOT NULL DEFAULT 'BRZ',
PRIMARY KEY(SID)
);

/* Assumptions:
   include functions [course_count(), current_income()]
*/
CREATE TABLE Instructor(
IID             INT AUTO_INCREMENT,
name            VARCHAR(50) NOT NULL,
e_mail          VARCHAR(50) NOT NULL UNIQUE,
password        VARCHAR(30) NOT NULL,
PRIMARY KEY(IID)
);

CREATE TABLE Admin(
AID             INT AUTO_INCREMENT,
name            VARCHAR(50) NOT NULL,
e_mail          VARCHAR(50) NOT NULL UNIQUE,
password        VARCHAR(30) NOT NULL,
salary          NUMERIC(12, 2) NOT NULL DEFAULT 0.00,
PRIMARY KEY(AID)
);

/* Assumptions:
   include functions [rating(), student_count(), lecture_count()]
   constraints for category and level
   0 <= cost <= 999,999.99
   discount_allowed = True OR Flase
   0 <= certificate_threshold <= 100.00
   attention: FOREIGN KEY (creator_IID) REFERENCES Instructor(IID) ON DELETE NO ACTION ON UPDATE CASCADE
              UNIQUE (creator_IID, course_name)
*/
CREATE TABLE Course(
CID                     INT AUTO_INCREMENT,
course_name             VARCHAR(70) NOT NULL,
description             VARCHAR(300),
category                VARCHAR(30),
level                   VARCHAR(30),
cost                    NUMERIC(8, 2) NOT NULL,
discount_allowed        BOOLEAN,
certificate_threshold   NUMERIC(5, 2),
creator_IID             INT NOT NULL,
PRIMARY KEY(CID),
FOREIGN KEY (creator_IID) REFERENCES Instructor(IID) ON DELETE NO ACTION ON UPDATE CASCADE,
UNIQUE (creator_IID, course_name)
);

/* Assumptions:
   lecture_content is big data
   lecture_content is blob (not recommended, try to store videos in file directories and hold URLs)
   Attention: UNIQUE (CID, title)
*/
CREATE TABLE Lecture(
CID                 INT NOT NULL,
Lec_ID              INT NOT NULL,
title               VARCHAR(300) NOT NULL,
lecture_content     BLOB NOT NULL,
duration            TIME,
date                DATE,
PRIMARY KEY(CID, Lec_ID),
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE,
UNIQUE (CID, title),
INDEX(Lec_ID)
);

CREATE TABLE Quiz(
CID                 INT NOT NULL,
QID                 INT NOT NULL,
title               VARCHAR(300) NOT NULL,
date                DATE,
PRIMARY KEY(CID, QID),
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE,
UNIQUE (CID, title),
INDEX(QID)
);

/*
 Attention: answer ENUM('choice1', 'choice2', 'choice3', 'choice4') NOT NULL DEFAULT 'choice1'
 answer = 1 => answer = choice1
 */
CREATE TABLE Quiz_Question(
CID                 INT NOT NULL,
QID                 INT NOT NULL,
question_num        INT NOT NULL,
question_text       VARCHAR(300) NOT NULL,
choice1             VARCHAR(50) NOT NULL DEFAULT '',
choice2             VARCHAR(50),
choice3             VARCHAR(50),
choice4             VARCHAR(50),
answer              ENUM('choice1', 'choice2', 'choice3', 'choice4') NOT NULL DEFAULT 'choice1',
PRIMARY KEY(CID, QID, question_num),
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (QID) REFERENCES Quiz(QID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Note(
Note_ID             INT AUTO_INCREMENT,
SID                 INT NOT NULL,
Lec_ID              INT NOT NULL,
time                TIMESTAMP,
text                VARCHAR(300) NOT NULL,
PRIMARY KEY(Note_ID),
FOREIGN KEY (SID) REFERENCES Student(SID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (Lec_ID) REFERENCES Lecture(Lec_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Course_Announcement(
Ann_ID              INT AUTO_INCREMENT,
IID                 INT NOT NULL,
CID                 INT NOT NULL,
date                DATE,
subject_name        VARCHAR(30) NOT NULL,
text                VARCHAR(300) NOT NULL,
PRIMARY KEY(Ann_ID),
FOREIGN KEY (IID) REFERENCES Instructor(IID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE QandA_Entry(
QandA_ID            INT AUTO_INCREMENT,
subject_name        VARCHAR(30) NOT NULL,
text                VARCHAR(300) NOT NULL,
date                DATE,
PRIMARY KEY(QandA_ID)
);

CREATE TABLE Complaint_Entry(
Complaint_ID        INT AUTO_INCREMENT,
subject_name        VARCHAR(30) NOT NULL,
text                VARCHAR(300) NOT NULL,
date                DATE,
refund_request      BOOLEAN,
PRIMARY KEY(Complaint_ID)
);

/*
 Binary relationship between Student and Course
 Attributes: progress, rating
 */
CREATE TABLE Enrolls(
SID                 INT NOT NULL,
CID                 INT NOT NULL,
progress            NUMERIC(5, 2) DEFAULT 0.00,
rating              NUMERIC(5, 2),
PRIMARY KEY(SID, CID),
FOREIGN KEY (SID) REFERENCES Student(SID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE
);

/*
 Binary relationship between Student and Course
 Attributes: date
 */
CREATE TABLE Wishlist(
SID                 INT NOT NULL,
CID                 INT NOT NULL,
date                DATE,
PRIMARY KEY(SID, CID),
FOREIGN KEY (SID) REFERENCES Student(SID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE
);

/*
 Binary relationship between Student and Course
 Attributes: date
 */
CREATE TABLE Certificate(
SID                 INT NOT NULL,
CID                 INT NOT NULL,
date                DATE,
PRIMARY KEY(SID, CID),
FOREIGN KEY (SID) REFERENCES Student(SID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE
);

/*
 Ternary relationship between Student, Course, QandA_Entry
 Attributes: date
 Attention: FOREIGN KEY (SID) REFERENCES Student(SID) ON DELETE NO ACTION ON UPDATE CASCADE
 */
CREATE TABLE QandA_Post_Student(
QandA_ID            INT NOT NULL,
SID                 INT NOT NULL,
CID                 INT NOT NULL,
PRIMARY KEY(QandA_ID, SID, CID),
FOREIGN KEY (QandA_ID) REFERENCES QandA_Entry(QandA_ID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (SID) REFERENCES Student(SID) ON DELETE NO ACTION ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE
);

/*
 Ternary relationship between Instructor, Course, QandA_Entry
 Attributes: date
 Attention: FOREIGN KEY (IID) REFERENCES Instructor(IID) ON DELETE NO ACTION ON UPDATE CASCADE
 */
CREATE TABLE QandA_Post_Instructor(
QandA_ID            INT NOT NULL,
IID                 INT NOT NULL,
CID                 INT NOT NULL,
PRIMARY KEY(QandA_ID, IID, CID),
FOREIGN KEY (QandA_ID) REFERENCES QandA_Entry(QandA_ID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (IID) REFERENCES Instructor(IID) ON DELETE NO ACTION ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE
);

/*
 Ternary relationship between Instructor, Course, Complaint_Entry
 */
CREATE TABLE Complaint_Post_Instructor(
Complaint_ID        INT NOT NULL,
IID                 INT NOT NULL,
CID                 INT NOT NULL,
PRIMARY KEY(Complaint_ID, IID, CID),
FOREIGN KEY (Complaint_ID) REFERENCES Complaint_Entry(Complaint_ID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (IID) REFERENCES Instructor(IID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE
);


/*
 Ternary relationship between Student, Course, Complaint_Entry
 */
CREATE TABLE Complaint_Post_Student(
Complaint_ID        INT NOT NULL,
SID                 INT NOT NULL,
CID                 INT NOT NULL,
PRIMARY KEY(Complaint_ID, SID, CID),
FOREIGN KEY (Complaint_ID) REFERENCES Complaint_Entry(Complaint_ID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (SID) REFERENCES Student(SID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE
);

/*
 Binary relationship between Instructor and Course
 */
CREATE TABLE Teaches(
IID                 INT NOT NULL,
CID                 INT NOT NULL,
PRIMARY KEY(IID, CID),
FOREIGN KEY (IID) REFERENCES Instructor(IID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE
);

/*
 Binary relationship between Admin and Complaint_Entry
 Attention: FOREIGN KEY (AID) REFERENCES Admin(AID) ON DELETE NO ACTION ON UPDATE CASCADE
 */
CREATE TABLE Evaluates(
AID                 INT NOT NULL,
Complaint_ID        INT NOT NULL,
PRIMARY KEY(AID,  Complaint_ID),
FOREIGN KEY (AID) REFERENCES Admin(AID) ON DELETE NO ACTION ON UPDATE CASCADE,
FOREIGN KEY (Complaint_ID) REFERENCES Complaint_Entry(Complaint_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

/*
 Binary relationship between Admin and Course
 Attributes: rate
 Attention: FOREIGN KEY (AID) REFERENCES Admin(AID) ON DELETE NO ACTION ON UPDATE CASCADE
 */
CREATE TABLE Discount(
AID                 INT NOT NULL,
CID                 INT NOT NULL,
rate                NUMERIC(5, 2),
PRIMARY KEY(AID,  CID),
FOREIGN KEY (AID) REFERENCES Admin(AID) ON DELETE NO ACTION ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE
);

/*
 Binary relationship between Instructor and Course
 Attributes: invite_link, date
 Attention: it uses its own key to allow instructors to create several links
 */
CREATE TABLE Zoom_Session(
Session_ID          INT AUTO_INCREMENT,
IID                 INT NOT NULL,
CID                 INT NOT NULL,
invite_link         VARCHAR(1024),
date                DATE,
PRIMARY KEY(Session_ID),
FOREIGN KEY (IID) REFERENCES Instructor(IID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE
);

/*
 Binary relationship between Student and Quiz
 Attributes: grade
 Attention: its key is Student(SID) U Quiz(CID, QID)
 */
CREATE TABLE Take_Quiz(
SID                 INT NOT NULL,
CID                 INT NOT NULL,
QID                 INT NOT NULL,
grade               NUMERIC(5, 2),
PRIMARY KEY(SID, CID, QID),
FOREIGN KEY (SID) REFERENCES Student(SID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (CID) REFERENCES Course(CID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (QID) REFERENCES Quiz(QID) ON DELETE CASCADE ON UPDATE CASCADE
);